package br.com.hackprovi.proviHack.services;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.hackprovi.proviHack.dtos.UserDto;
import br.com.hackprovi.proviHack.dtos.UserInsertDto;
import br.com.hackprovi.proviHack.models.User;
import br.com.hackprovi.proviHack.repositories.UserRepository;

@Service
public class UserService {

	@Autowired
	private UserRepository repository;

	@Autowired
	private BCryptPasswordEncoder passwordEncoder;

	@Transactional(readOnly = true)
	public Page<UserDto> findAllPaged(Pageable pageable) {
		Page<User> list = repository.findAll(pageable);
		return list.map(x -> new UserDto(x));
	}

	@Transactional(readOnly = true)
	public UserDto findById(Long id) throws Exception {
		Optional<User> obj = repository.findById(id);
		User entity = obj.orElseThrow(() -> new Exception("Id n√£o encontrado"));
		return new UserDto(entity);
	}

	@Transactional
	public UserDto insert(UserInsertDto dto) {
		User entity = new User();
		copyDtoToEntity(dto, entity);
		entity.setPassword(passwordEncoder.encode(dto.getPassword()));
		entity = repository.save(entity);
		return new UserDto(entity);
	}

	private void copyDtoToEntity(UserDto dto, User entity) {
		entity.setName(dto.getName());
		entity.setEmail(dto.getEmail());

	}

}
